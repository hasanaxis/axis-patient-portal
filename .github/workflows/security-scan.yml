name: Security Scan

on:
  schedule:
    # Run daily security scans
    - cron: '0 6 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint Security Plugin
      run: |
        npm install eslint-plugin-security --save-dev
        npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.js --format json --output-file eslint-security-report.json
      continue-on-error: true

    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/javascript
          p/typescript
          p/react
          p/nodejs
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Bandit (Python security linter)
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sast-reports
        path: |
          eslint-security-report.json
          bandit-report.json
          semgrep.sarif

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../mobile && npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level moderate --json > npm-audit-root.json || true
        cd backend && npm audit --audit-level moderate --json > ../npm-audit-backend.json || true
        cd ../frontend && npm audit --audit-level moderate --json > ../npm-audit-frontend.json || true
        cd ../mobile && npm audit --audit-level moderate --json > ../npm-audit-mobile.json || true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: >-
          --severity-threshold=medium
          --json-file-output=snyk-report.json

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: depcheck
      with:
        project: 'axis-imaging-portal'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}

    - name: Upload Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/dependency-check-report.sarif

    - name: Check for high/critical vulnerabilities
      run: |
        if [ -f "snyk-report.json" ]; then
          high_vulns=$(jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical")' snyk-report.json | jq -s length)
          if [ "$high_vulns" -gt 0 ]; then
            echo "Found $high_vulns high/critical vulnerabilities"
            echo "high_vulns=$high_vulns" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Upload dependency scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          npm-audit-*.json
          snyk-report.json
          reports/

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Dockerfile security scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Dockerfile scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results.sarif

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'

    - name: Run Terraform security scan (if applicable)
      if: github.event_name == 'push'
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: './infrastructure'
        format: 'sarif'
        soft_fail: true

    - name: Run Kubernetes security scan
      if: github.event_name == 'push'
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        
        # Scan Kubernetes manifests
        if [ -d "./k8s" ]; then
          for file in ./k8s/*.yaml; do
            if [ -f "$file" ]; then
              ./kubesec scan "$file" > "kubesec-$(basename "$file").json"
            fi
          done
        fi

    - name: Upload infrastructure scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-reports
        path: |
          hadolint-results.sarif
          trivy-fs-results.sarif
          kubesec-*.json

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: --verbose --report-format sarif --report-path gitleaks-report.sarif

    - name: Upload GitLeaks results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gitleaks-report.sarif

    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline > detect-secrets-report.json || true

    - name: Upload secrets scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: secrets-reports
        path: |
          gitleaks-report.sarif
          detect-secrets-report.json

  # Dynamic Application Security Testing (DAST)
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [sast-scan]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: axis_security_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install and build application
      run: |
        npm ci
        cd backend && npm ci && npm run build
        cd ../frontend && npm ci && npm run build

    - name: Start application
      run: |
        cd backend && npm start &
        cd frontend && npm start &
        sleep 30
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_security_test
        NODE_ENV: test
        PORT: 3001

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j -r zap-baseline-report.html'

    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j -r zap-full-scan-report.html'

    - name: Run Nuclei vulnerability scanner
      uses: projectdiscovery/nuclei-action@main
      with:
        target: http://localhost:3000
        output: nuclei-report.txt

    - name: Upload DAST scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dast-reports
        path: |
          zap-baseline-report.html
          zap-full-scan-report.html
          nuclei-report.txt

  # API Security Testing
  api-security-scan:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: axis_api_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install and start backend
      run: |
        cd backend && npm ci && npm run build && npm start &
        sleep 15
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_api_test
        NODE_ENV: test
        PORT: 3001

    - name: Generate OpenAPI documentation
      run: |
        cd backend
        curl http://localhost:3001/api/docs/json > openapi.json

    - name: Run OWASP ZAP API Scan
      uses: zaproxy/action-api-scan@v0.6.0
      with:
        target: http://localhost:3001
        format: openapi
        api_spec: backend/openapi.json
        cmd_options: '-a -j -r zap-api-report.html'

    - name: Run Dredd API testing
      run: |
        npm install -g dredd
        dredd backend/openapi.json http://localhost:3001 --reporter html --output dredd-report.html

    - name: Run Postman Newman security tests
      run: |
        npm install -g newman
        if [ -f "./tests/security/api-security-tests.postman_collection.json" ]; then
          newman run ./tests/security/api-security-tests.postman_collection.json \
            --environment ./tests/security/test-environment.postman_environment.json \
            --reporters html,json \
            --reporter-html-export newman-report.html \
            --reporter-json-export newman-report.json
        fi

    - name: Upload API security scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-security-reports
        path: |
          zap-api-report.html
          dredd-report.html
          newman-report.html
          newman-report.json

  # Compliance and Privacy Scanning
  compliance-scan:
    name: Compliance & Privacy Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run privacy and GDPR compliance check
      run: |
        # Check for GDPR compliance patterns
        grep -r "cookie" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > gdpr-cookie-usage.txt || true
        grep -r "localStorage\|sessionStorage" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > data-storage-usage.txt || true
        grep -r "password\|email\|phone" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > pii-usage.txt || true

    - name: Check for Australian Privacy Act compliance
      run: |
        # Check for Australian-specific privacy requirements
        grep -r "medicare\|abn\|tfn" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > au-privacy-data.txt || true

    - name: Run healthcare compliance check (HIPAA/Australian guidelines)
      run: |
        # Check for healthcare data handling patterns
        grep -r "patient\|medical\|health\|diagnosis" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > healthcare-data-usage.txt || true

    - name: Check security headers implementation
      run: |
        # Verify security headers are implemented
        grep -r "helmet\|csp\|hsts\|cors" --include="*.js" --include="*.ts" . > security-headers.txt || true

    - name: Upload compliance scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compliance-reports
        path: |
          gdpr-cookie-usage.txt
          data-storage-usage.txt
          pii-usage.txt
          au-privacy-data.txt
          healthcare-data-usage.txt
          security-headers.txt

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t axis-imaging:test .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'axis-imaging:test'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Upload Trivy container scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-container-results.sarif'

    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: axis-imaging:test
        args: --severity-threshold=medium --json-file-output=snyk-container-report.json

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-security-report.txt

    - name: Upload container security scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: container-security-reports
        path: |
          trivy-container-results.sarif
          snyk-container-report.json
          docker-bench-security-report.txt

  # Security Report Consolidation
  security-report:
    name: Consolidate Security Reports
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, infrastructure-scan, secrets-scan, dast-scan, api-security-scan, compliance-scan, container-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports

    - name: Setup Python for report generation
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install report dependencies
      run: |
        pip install jinja2 markdown beautifulsoup4 requests

    - name: Generate consolidated security report
      run: |
        python .github/scripts/generate-security-report.py \
          --input-dir security-reports \
          --output security-dashboard.html \
          --format html

    - name: Check security thresholds
      run: |
        python .github/scripts/check-security-thresholds.py \
          --input-dir security-reports \
          --config .github/security-thresholds.yml

    - name: Upload consolidated security report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-report
        path: |
          security-dashboard.html
          security-summary.json

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.json')) {
            const summary = JSON.parse(fs.readFileSync('security-summary.json'));
            const comment = `## 🔒 Security Scan Results
            
            **SAST**: ${summary.sast.status} (${summary.sast.issues} issues)
            **Dependencies**: ${summary.dependencies.status} (${summary.dependencies.vulnerabilities} vulnerabilities)
            **Secrets**: ${summary.secrets.status} (${summary.secrets.exposed} exposed)
            **Infrastructure**: ${summary.infrastructure.status} (${summary.infrastructure.misconfigurations} misconfigurations)
            
            ${summary.overall.status === 'FAILED' ? '❌ Security scan failed - please review the issues before merging.' : '✅ All security checks passed!'}
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Fail on security violations
      run: |
        if [ -f "security-summary.json" ]; then
          status=$(jq -r '.overall.status' security-summary.json)
          if [ "$status" = "FAILED" ]; then
            echo "Security scan failed with critical issues"
            exit 1
          fi
        fi