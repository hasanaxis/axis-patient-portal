name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Analysis
  code-analysis:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../mobile && npm ci

    - name: Run ESLint
      run: |
        npm run lint
        npm run lint:backend
        npm run lint:frontend

    - name: Run Prettier check
      run: npm run format:check

    - name: TypeScript compilation check
      run: |
        npm run type-check
        cd backend && npm run type-check
        cd ../frontend && npm run type-check

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'axis-imaging-portal'
        path: '.'
        format: 'ALL'

    - name: Upload OWASP report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: axis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Setup test database
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_test
        REDIS_URL: redis://localhost:6379

    - name: Run backend unit tests
      run: cd backend && npm run test:unit
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_TEST_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_TEST_TOKEN }}

    - name: Run backend integration tests
      run: cd backend && npm run test:integration
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret

    - name: Generate backend coverage report
      run: cd backend && npm run test:coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage/lcov.info
        flag: backend
        name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Run frontend unit tests
      run: cd frontend && npm run test:unit

    - name: Run frontend component tests
      run: cd frontend && npm run test:components

    - name: Generate frontend coverage report
      run: cd frontend && npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: frontend/coverage/lcov.info
        flag: frontend
        name: frontend-coverage

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Mobile Testing
  mobile-tests:
    name: Mobile Tests
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup React Native environment
      run: |
        brew install watchman
        npm install -g @react-native-community/cli

    - name: Install mobile dependencies
      run: cd mobile && npm ci

    - name: Install iOS dependencies
      run: cd mobile/ios && pod install

    - name: Run mobile unit tests
      run: cd mobile && npm run test:unit

    - name: Build iOS app for testing
      run: cd mobile && npx react-native build-ios --configuration Debug

    - name: Setup iOS Simulator
      run: |
        xcrun simctl create "iPhone 14" "iPhone 14" "iOS16.0"
        xcrun simctl boot "iPhone 14"

    - name: Run Detox E2E tests (iOS)
      run: cd mobile && npm run test:e2e:ios

    - name: Upload mobile test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: mobile-test-artifacts
        path: mobile/artifacts/

  # End-to-End Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: axis_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup E2E database
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_e2e

    - name: Start backend server
      run: |
        cd backend && npm run start:test &
        sleep 10
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_e2e
        PORT: 3001

    - name: Start frontend server
      run: |
        cd frontend && npm run start &
        sleep 10
      env:
        REACT_APP_API_URL: http://localhost:3001

    - name: Install Playwright
      run: cd frontend && npx playwright install

    - name: Run E2E tests
      run: cd frontend && npm run test:e2e

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [code-analysis]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/javascript
          p/typescript
          p/react

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Accessibility Testing
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: cd frontend && npm ci

    - name: Start frontend server
      run: |
        cd frontend && npm run start &
        sleep 10

    - name: Run accessibility tests
      run: cd frontend && npm run test:accessibility

    - name: Run Pa11y tests
      run: |
        npm install -g pa11y
        pa11y http://localhost:3000 --reporter json > accessibility-report.json

    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports
        path: |
          frontend/accessibility-report.json
          accessibility-report.json

  # Visual Regression Testing
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: cd frontend && npm ci

    - name: Install Playwright browsers
      run: cd frontend && npx playwright install

    - name: Start application
      run: |
        cd frontend && npm start &
        sleep 30

    - name: Start mock backend
      run: |
        cd frontend && npm run start:mock-api &
        sleep 10

    - name: Run Percy visual tests
      run: |
        cd frontend && npx percy exec -- npx playwright test \
          --config=tests/visual-regression/visual-regression.config.js
      env:
        PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        PERCY_BRANCH: ${{ github.head_ref || github.ref_name }}

    - name: Upload visual test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: |
          frontend/test-results/
          frontend/screenshots/

  # Database Performance Testing
  database-performance-tests:
    name: Database Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: axis_performance_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Setup performance test database
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_performance_test

    - name: Run database performance tests
      run: cd backend && npm run test:performance
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/axis_performance_test

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: database-performance-results
        path: backend/performance-results/

  # Load Testing
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [e2e-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        cd testing/uat/test-cases
        artillery run load-testing.yml --output load-test-results.json

    - name: Generate load test report
      run: artillery report load-test-results.json

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: |
          load-test-results.json
          load-test-report.html

  # Build and Deploy (Staging)
  build-and-deploy-staging:
    name: Build & Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-tests]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Build backend
      run: cd backend && npm run build

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

    - name: Deploy to staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'axis-imaging-staging'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}

    - name: Run smoke tests on staging
      run: |
        sleep 30
        curl -f https://axis-imaging-staging.azurewebsites.net/health || exit 1
        cd frontend && npm run test:smoke -- --baseUrl=https://axis-imaging-staging.azurewebsites.net

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-deploy-staging, load-tests, accessibility-tests]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://portal.axisimaging.com.au

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Build for production
      run: |
        cd backend && npm run build:prod
        cd ../frontend && npm run build:prod

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push production Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.prod
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest

    - name: Deploy to production
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'axis-imaging-production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}

    - name: Run production smoke tests
      run: |
        sleep 60
        curl -f https://portal.axisimaging.com.au/health || exit 1
        cd frontend && npm run test:smoke -- --baseUrl=https://portal.axisimaging.com.au

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **Deployed to:**
          - Production: https://portal.axisimaging.com.au
          
          **Test Results:**
          - Backend Tests: ✅
          - Frontend Tests: ✅
          - E2E Tests: ✅
          - Security Scan: ✅
          - Load Tests: ✅
          - Accessibility: ✅
        draft: false
        prerelease: false

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Setup monitoring checks
      run: |
        # Send deployment notification to Slack
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 Axis Imaging Portal deployed successfully to production"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Run synthetic monitoring tests
      run: |
        # Run Datadog synthetic tests
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}" \
          -d '{"tests":["synthetic-test-login","synthetic-test-studies","synthetic-test-appointments"]}' \
          "https://api.datadoghq.com/api/v1/synthetics/tests/trigger/ci"

    - name: Update deployment status
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        env: production
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

# Workflow notifications
notifications:
  slack:
    webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    on_success: true
    on_failure: true
    on_start: false
    
  email:
    recipients:
      - ops@axisimaging.com.au
      - dev-team@axisimaging.com.au
    on_failure: true