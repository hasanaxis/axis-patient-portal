# Production-ready Docker Compose for Axis Imaging
version: '3.8'

services:
  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: axis-postgres-primary
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-axis_imaging}
      POSTGRES_USER: ${POSTGRES_USER:-axis_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-repl_user}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./docker/postgres/primary:/docker-entrypoint-initdb.d/
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - axis-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-axis_user} -d ${POSTGRES_DB:-axis_imaging}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: axis-postgres-replica
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-axis_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-repl_user}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      PGUSER: ${POSTGRES_USER:-axis_user}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres/replica:/docker-entrypoint-initdb.d/
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - axis-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-axis_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: axis-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - axis-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Backend API Services (Load Balanced)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: axis-backend-1
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-axis_user}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB:-axis_imaging}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-axis_user}:${POSTGRES_PASSWORD}@postgres-replica:5432/${POSTGRES_DB:-axis_imaging}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY}
      AUDIT_ENCRYPTION_KEY: ${AUDIT_ENCRYPTION_KEY}
      PORT: 5000
    volumes:
      - audit_logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: axis-backend-2
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-axis_user}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB:-axis_imaging}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER:-axis_user}:${POSTGRES_PASSWORD}@postgres-replica:5432/${POSTGRES_DB:-axis_imaging}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY}
      AUDIT_ENCRYPTION_KEY: ${AUDIT_ENCRYPTION_KEY}
      PORT: 5000
    volumes:
      - audit_logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - axis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: axis-frontend
    depends_on:
      - backend-1
      - backend-2
    networks:
      - axis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: axis-loadbalancer
    volumes:
      - ./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./docker/haproxy/certs:/etc/ssl/certs:ro
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    depends_on:
      - backend-1
      - backend-2
      - frontend
    networks:
      - axis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: axis-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - axis-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: axis-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${DOMAIN_NAME}
      GF_SERVER_ROOT_URL: https://${DOMAIN_NAME}/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - axis-network
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: axis-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - axis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: axis-logstash
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - audit_logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - axis-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: axis-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - axis-network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: axis-backup
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_DB: ${POSTGRES_DB:-axis_imaging}
      POSTGRES_USER: ${POSTGRES_USER:-axis_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-ap-southeast-2}
      S3_BUCKET: ${S3_BACKUP_BUCKET}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data:ro
      - audit_logs:/app/logs:ro
      - ./backups:/backups
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - axis-network
    restart: unless-stopped

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
  audit_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  axis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16